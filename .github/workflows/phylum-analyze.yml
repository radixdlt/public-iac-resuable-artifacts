name: Phylum analyze

on:
  workflow_call:
    inputs:
      phylum_project_id:
        required: false
        type: string
      phylum_pr_number:
        required: false
        type: string
      phylum_pr_name:
        required: false
        type: string
      phylum_group_name:
        required: false
        type: string
      github_repository:
        required: false
        type: string
      add_report_comment_to_pull_request:
        required: false
        type: boolean
        default: false
    secrets:
      phylum_api_key:
        required: true
jobs:
  phylum_analyze:
    name: Analyze dependencies with Phylum
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: RDXWorks-actions/checkout@main
        with:
          fetch-depth: 0
      - uses: RDXWorks-actions/setup-python@main
        with:
          python-version: 3.10.6
      - name: Install Phylum
        run: |
          curl https://sh.phylum.io/ | sh -s -- --yes
          # Add the Python user base binary directory to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Transform some variables
        id: transform
        run: |
          echo "GIT_REPO_LOWERCASE=$(echo ${{ inputs.github_repository }} | awk -F '/' '{print $2}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          GIT_REPO_UPPERCASE=$(echo ${{ inputs.github_repository }} | awk -F '/' '{print $2}' | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          echo $GIT_REPO_UPPERCASE
          echo ${GIT_REPO_UPPERCASE}
          echo "PHYLUM_PROJECT_ID_TRANSFORMED=${GIT_REPO_UPPERCASE}_PHYLUM_PROJECT_ID" >> $GITHUB_OUTPUT
          PHYLUM_PROJECT_ID_TRANSFORMED="GH_${GIT_REPO_UPPERCASE}_PHYLUM_PROJECT_ID"
          echo "$PHYLUM_PROJECT_ID_TRANSFORMED"
      - uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: 'arn:aws:iam::${{ secrets.SECRETS_ACCOUNT_ID }}:role/gh-common-secrets-read-access'
          app_name: ${{ env.GIT_REPO_LOWERCASE }}
          step_name: 'phylum'
          secret_prefix: 'GH'
          secret_name: 'arn:aws:secretsmanager:eu-west-2:${{ secrets.SECRETS_ACCOUNT_ID }}:secret:github-actions/common/phylum-credentials-4koyXP'
          parse_json: true
      - name: Run Phylum Analysis
        env: 
          PHYLUM_API_KEY: ${{ env.GH_PHYLUM_API_KEY }}
          PR_NUMBER: ${{ inputs.phylum_pr_number }}
          BRANCH_NAME: ${{ inputs.phylum_pr_name }}
        run: | 
          phylum analyze --quiet --label GitHub-Actions_PR%23${PR_NUMBER}_${BRANCH_NAME} > /dev/null 2>&1 || exit_code=$?
          if [ $exit_code -eq 100 ]; then 
            echo "phylum_analyze_status=failure" >> $GITHUB_ENV 
            exit 0; 
          fi
      - name: Phylum Report Comment
        if: ${{ inputs.add_report_comment_to_pull_request == true && env.phylum_analyze_status == 'failure' }} 
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ inputs.github_repository }}
          PR_NUMBER: ${{ inputs.phylum_pr_number }}
          BRANCH_NAME: ${{ inputs.phylum_pr_name }}
          PHYLUM_PROJECT_ID: ${{ env[steps.transform.outputs.PHYLUM_PROJECT_ID_TRANSFORMED] }}
          PHYLUM_GROUP_NAME: ${{ inputs.phylum_group_name }}
        run: |
          # Check if a comment already exists
          EXISTING_COMMENT_ID=$(gh api repos/${REPO}/issues/${PR_NUMBER}/comments | jq -r '.[] | select(.body | contains("Phylum Report")) | .id')
          if [ -z "$EXISTING_COMMENT_ID" ]; then
            COMMENT_BODY="### [Phylum Report Link](https://app.phylum.io/projects/${PHYLUM_PROJECT_ID}?label=GitHub-Actions_PR%23${PR_NUMBER}_${BRANCH_NAME}&group=${PHYLUM_GROUP_NAME})"
            gh api repos/${REPO}/issues/${PR_NUMBER}/comments -f body="${COMMENT_BODY}"
          fi