# A workflow to build docker images inside of the radixdlt-organization.
# It should be used for all docker build processes in order to profit from:
# - caching
# - streamlined authentication flow
# - auditing on secret access (coming soon)
# - automatic updates to dependent GH actions
# - image security scanning (coming soon)
# - dockerfile linting

name: build-and-push-docker

on:
  workflow_call:
    secrets:
      workload_identity_provider:
        description: 'Authentication method for gcr'
        required: false
      service_account:
        description: 'Authentication method for gcr'
        required: false
      role_to_assume:
        description: 'Authentication method for docker via aws'
        required: false
    inputs:
      environment:
        description: 'Name of environment that will enforce manual approval'
        required: false
        default: ''
        type: string
      platforms:
        description: 'The platforms to build the image on'
        required: true
        type: string
        default: 'linux/amd64'
      cache_tag_suffix:
        description: 'The tag of the cache image'
        required: false
        type: string
        default: 'default'
      tag:
        description: 'The tag to push'
        required: false
        type: string
        default: ''
      tags:
        description: 'List of tags as key-value pair attributes'
        required: false
        type: string
        default: ''
      flavor:
        description: 'List of flavor configs as key-value pair attributes'
        required: false
        type: string
        default: ''
      flavors:
        description: 'List of flavor configs as key-value pair attributes'
        required: false
        type: string
        default: ''
      image_name:
        description: 'The name of the image'
        required: true
        type: string
      image_organization:
        description: 'The organization to push the image to'
        required: true
        type: string
      image_registry:
        description: 'The registry to push the image to'
        required: false
        type: string
        default: "docker.io"
      restore_artifact:
        description: 'Wether or not to restore artifacts'
        required: false
        type: string
        default: "false"
      artifact_name:
        description: 'Name of the artifact'
        required: false
        type: string
      artifact_location:
        description: 'Directory to store the artifact in'
        required: false
        type: string
      context:
        description: 'The folder from which to execute the build command'
        required: false
        type: string
        default: "."
      dockerfile:
        description: 'The path to the dockerfile to build'
        required: true
        type: string
      enable_dockerhub:
        description: 'Wether to log into dockerhub'
        required: false
        type: string
        default: "false"
      enable_gcr:
        description: 'Wether to log into google cloud registry'
        required: false
        type: string
        default: "true"
      enable_trivy:
        description: 'Wether to scan image for vulnerability'
        required: false
        type: string
        default: "false"
      enable_pr_comment:
        description: 'Wether to scan image for vulnerability'
        required: false
        type: string
        default: "true"
      runs_on:
        description: 'The type of github runner to use'
        required: false
        type: string
        default: "ubuntu-22.04"
      build-args:
        description: 'Build arguments'
        required: false
        type: string
        default: ""
      target:
        description: 'Build target for multistage builds'
        required: false
        type: string
        default: ""
      provenance:
        description: 'The provenance string supplied to docker-build-push'
        required: false
        type: string
        default: 'true'
      scan_image:
        description: 'Scan image for vulnerabilities'
        required: false
        type: boolean
        default: false
      continue_on_scan_image_finding:
        description: 'Continue on scan_image vulnerability finding. This is intended to be used temporary until fix'
        required: false
        type: boolean
        default: false
      snyk_target_ref:
        description: 'Snyk target reference branch'
        required: false
        type: string
        default: 'main'
      with_sbom:
        description: 'Generate SBOM attestation for the build'
        required: false
        type: boolean
        default: true
      disable_qemu:
        description: 'Whether the setup qemu step should be skipped'
        required: false
        type: boolean
        default: false
      post_script:
        description: 'script that will run after the image is built'
        required: false
        type: string
        default: ''
    outputs:
      tags:
        description: "The tags from metadata-action"
        value: ${{ jobs.build-and-push.outputs.tags }}
      labels:
        description: "The labels from metadata-action"
        value: ${{ jobs.build-and-push.outputs.labels }}
      json:
        description: "The json from metadata-action"
        value: ${{ jobs.build-and-push.outputs.json }}
jobs:

  oidc_debug_test:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    name: A test of the oidc debugger
    steps:
      - name: Checkout actions-oidc-debugger
        uses: actions/checkout@v3
        with:
          repository: github/actions-oidc-debugger
          ref: 58fe0cc61207102542ebf9101114da5ac5a72582
          token: ${{ github.token }}
          path: ./.github/actions/actions-oidc-debugger
      - name: Debug OIDC Claims
        uses: ./.github/actions/actions-oidc-debugger
        with:
          audience: 'https://github.com/github'

  build-and-push:
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    environment: ${{ inputs.environment }}
    needs: oidc_debug_test
    runs-on: ${{ inputs.runs_on }}
    outputs:
      default_tag: ${{ steps.default_docker_tag.outputs.default_tag }}
      tags: ${{ steps.metadata.outputs.tags }}
      labels: ${{ steps.metadata.outputs.labels }}
      json: ${{ steps.metadata.outputs.json }}
    steps:
      # This is version v3.6.0
      # https://github.com/actions/checkout/releases/tag/v3.6.0
      - name: Checkout Code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          fetch-depth: 0
      # This is version v3.1.0
      # https://github.com/hadolint/hadolint-action/releases/tag/v3.1.0
      # - uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf
      #   with:
      #     dockerfile: ${{ inputs.dockerfile }}
      #     no-fail: true

      # Restoring Artifacts build in a previous step
      - if: inputs.restore_artifact == 'true'
        name: Download artifact
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.artifact_location }}
      - if: inputs.restore_artifact == 'true'
        name: Display structure of downloaded files
        run: ls -R ${{ inputs.artifact_location }}

      ## Dockerhub

      ## Private Repo credentials
      # This is version v2.2.0
      # https://github.com/aws-actions/configure-aws-credentials/releases/tag/v2.2.0
      - name: "Configure AWS credentials (Private)"
        uses: aws-actions/configure-aws-credentials@50ac8dd1e1b10d09dac7b8727528b91bed831ac0
        with:
          role-to-assume: arn:aws:iam::308190735829:role/gh-common-secrets-read-access
          aws-region: eu-west-2
      # This is version v1.0.4
      # https://github.com/aws-actions/configure-aws-credentials/releases/tag/v1.0.4
      - name: Read secrets from AWS Secrets Manager into environment variables (Private)
        uses: aws-actions/aws-secretsmanager-get-secrets@022e8919774ecb75e8e375656d7b1898936ab878
        with:
          secret-ids: |
            DOCKERHUB_PRIVATE, github-actions/common/dockerhub-credentials
          parse-json-secrets: true
      # This is version v2.2.0
      # https://github.com/docker/login-action/releases/tag/v2.2.0
      - name: Login to Docker Hub (Private)
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          username: ${{env.DOCKERHUB_PRIVATE_USERNAME}}
          password: ${{env.DOCKERHUB_PRIVATE_TOKEN}}

      ## Public Repo credentials
      # This is version v1.7.0
      # https://github.com/aws-actions/configure-aws-credentials/releases/tag/v1.7.0
      - if: inputs.enable_dockerhub == 'true'
        name: "Configure AWS credentials (Public)"
        uses: aws-actions/configure-aws-credentials@50ac8dd1e1b10d09dac7b8727528b91bed831ac0
        with:
          role-to-assume: ${{ secrets.role_to_assume }}
          aws-region: eu-west-2
      - if: inputs.enable_dockerhub == 'true'
        name: Read secrets from AWS Secrets Manager into environment variables (Public)
        uses: aws-actions/aws-secretsmanager-get-secrets@022e8919774ecb75e8e375656d7b1898936ab878
        with:
          secret-ids: |
            DOCKERHUB_PUBLIC, github-actions/rdxworks/dockerhub-images/release-credentials
          parse-json-secrets: true
      # This is version v2.1.0
      # https://github.com/docker/login-action/releases/tag/v2.1.0
      - if: inputs.enable_dockerhub == 'true'
        name: Login to Docker Hub (Public)
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{env.DOCKERHUB_PUBLIC_USERNAME}}
          password: ${{env.DOCKERHUB_PUBLIC_TOKEN}}

      # Setting up Build environment
      # This is version v2.1.0
      # https://github.com/docker/setup-qemu-action/releases/tag/v2.1.0
      - if: inputs.disable_qemu == true
        name: Set up QEMU 
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      # This is version v2.4.1
      # https://github.com/docker/setup-buildx-action/releases/tag/v2.4.1
      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
        with:
          version: latest
          endpoint: builders

      - name: Setup tags with metadata-action
        id: metadata
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175
        with:
          images: |
            ${{ inputs.image_registry }}/${{ inputs.image_organization }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=${{ inputs.tag }},enable=${{ inputs.tag != '' }}
            ${{ inputs.tags }}
          flavor: |
            latest=false
            ${{ inputs.flavor }}
            ${{ inputs.flavors }}
      - name: Export default version
        id: default_docker_tag
        run: |
          echo "default_tag=${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}"
          echo "default_tag=${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}" >> $GITHUB_OUTPUT
          
      - name: Restore cached image-cache
        id: cache-image-restore
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8
        with:
          path: /tmp/outputs/cache/docker
          key: ${{ inputs.image_name }}-${{ inputs.cache_tag_suffix }}-${{ hashFiles(inputs.dockerfile) }}
      # Building the image
      # This is version v4.1.1
      # https://github.com/docker/build-push-action/releases/tag/v4.1.1
      - name: Build and push Docker Image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
        with:
          file: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          push: true
          platforms: ${{ inputs.platforms }}
          cache-from: |
            type=local,src=/tmp/outputs/cache/docker
          cache-to: |
            type=local,dest=/tmp/outputs/cache/docker,mode=max
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: ${{ inputs.build-args }}
          target: ${{ inputs.target }}
          provenance: ${{ inputs.provenance }}
          sbom: ${{ inputs.with_sbom }}
      - name: Save Image cache
        id: cache-image-save
        uses: actions/cache/save@v3
        with:
          path: /tmp/outputs/cache/docker
          key: ${{ steps.cache-image-restore.outputs.cache-primary-key }}

      # Post Processing (needs more testing)
      ## adding image tags to pull request
      - if: github.event_name == 'pull_request' && inputs.enable_pr_comment == 'true'
        name: Add docker tags to PR comment
        uses: thollander/actions-comment-pull-request@632cf9ce90574d125be56b5f3405cda41a84e2fd
        with:
          message: |
            Docker tags
            ${{ steps.metadata.outputs.tags }}
          comment_tag: dockerTags${{ inputs.image_name }}
      - name: Add docker tags to GH Summary
        id: ghsummary
        run: |
          echo "Docker tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.metadata.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "Default Tag: ${{ steps.default_docker_tag.outputs.default_tag }}" >> $GITHUB_STEP_SUMMARY

      # Snyk image scan
      - if: inputs.scan_image == true
        name: Fetch Snyk secrets
        uses: radixdlt/public-iac-resuable-artifacts/fetch-secrets@main
        with:
          role_name: 'arn:aws:iam::308190735829:role/gh-common-secrets-read-access'
          app_name: ${{ inputs.image_name }}
          step_name: 'snyk-scan-image'
          secret_prefix: 'SNYK'
          secret_name: 'arn:aws:secretsmanager:eu-west-2:308190735829:secret:github-actions/common/snyk-credentials-rXRpuX'
          parse_json: true
      - if: inputs.scan_image == true
        name: Snyk image scan
        continue-on-error: ${{ inputs.continue_on_scan_image_finding }}
        shell: bash
        run: |
          npm install snyk -g
          snyk -v
          snyk auth ${{ env.SNYK_TOKEN }}
          snyk container test ${{ inputs.image_registry }}/${{ inputs.image_organization }}/${{ inputs.image_name }}:${{ steps.default_docker_tag.outputs.default_tag }} --file=${{ inputs.dockerfile }} --severity-threshold=critical --target-reference=${{ inputs.snyk_target_ref }}

      - if: inputs.post_script != ''
        name: post script
        shell: bash
        run: |
          set -ex
          ${{ inputs.post_script }}
      # ## image scanning
      # - if: inputs.enable_trivy == 'true'
      #   name: Generate tarball from image
      #   run: |
      #     docker pull ${{ inputs.image_registry }}/${{ inputs.image_organization }}/${{ inputs.image_name }}:${{ steps.default_docker_tag.outputs.default_tag }}
      #     docker save -o vuln-image.tar ${{ inputs.image_registry }}/${{ inputs.image_organization }}/${{ inputs.image_name }}:${{ steps.default_docker_tag.outputs.default_tag }}
      # - if: inputs.enable_trivy == 'true'
      #   name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     input: /github/workspace/vuln-image.tar
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     exit-code: '0'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
      # - if: inputs.enable_trivy == 'true'
      #   name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: 'trivy-results.sarif'


# Example Usage
# 
# build_push_container:
#   needs: 
#     - build_deb
#   uses: radixdlt/public-iac-resuable-artifacts/.github/workflows/docker-build.yml@main
#   with:
#     environment: "release"
#     # image information
#     image_registry: "docker.io"
#     image_organization: "radixdlt"
#     image_name: "private-babylon-node"
#     tag: "latest"
#     labels: ""
#     # build information
#     restore_artifact: "true"
#     artifact_name: "deb4docker"
#     artifact_location: "docker"
#     context: "docker"
#     dockerfile: "./docker/Dockerfile.core"
#     platforms: "linux/amd64"
#     # optimizations
#     cache_tag_suffix: "babylon-node-pr"
#     enable_trivy: "false"
#     enable_pr_comment: "false"
#   secrets:
#     role_to_assume: ${{ secrets.DOCKERHUB_RELEASER_ROLE }}
